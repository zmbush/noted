// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Note /> matches snapshot 1`] = `
<WithStyles(ForwardRef(Card))
  className=""
>
  <WithStyles(ForwardRef(CardHeader))
    action={
      <React.Fragment>
        <WithStyles(ForwardRef(IconButton))
          aria-label="Add Subnote"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="Edit Note"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="More Options"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
      </React.Fragment>
    }
    avatar={null}
    title="note title"
  />
  <WithStyles(ForwardRef(Menu))
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "left",
        "vertical": "bottom",
      }
    }
    getContentAnchorEl={null}
    id="more-menu"
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "top",
      }
    }
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(DeleteIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Delete Note
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(DoneIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Pin Note
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(ArchiveIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Archive Note
    </WithStyles(ForwardRef(MenuItem))>
  </WithStyles(ForwardRef(Menu))>
  <ConfirmationDialog
    message="Are you sure?"
    negative="No"
    onNegative={[Function]}
    onPositive={[Function]}
    open={false}
    positive="Yes"
    title="You are about to delete note: note title"
  />
  <ConfirmationDialog
    message="Are you sure?"
    negative="No"
    onNegative={[Function]}
    onPositive={[Function]}
    open={false}
    positive="Yes"
    title="If you close this editor, you will lose your changes."
  />
  <WithStyles(ForwardRef(CardContent))>
    <WithStyles(ForwardRef(Dialog))
      classes={
        Object {
          "root": undefined,
        }
      }
      fullScreen={false}
      fullWidth={true}
      maxWidth="lg"
      onClose={[Function]}
      open={false}
    >
      <React.Suspense
        fallback={
          <Loading
            color="#000000"
            delay={0}
            height={64}
            type="spin"
            width={64}
          />
        }
      >
        <lazy
          note={
            Object {
              "body": "",
              "parent_note_id": 1,
              "tags": Array [],
              "title": "",
            }
          }
          onSave={[Function]}
        />
      </React.Suspense>
    </WithStyles(ForwardRef(Dialog))>
    <WithStyles(Tags)
      tags={
        Array [
          "tag1",
        ]
      }
    />
    <default_1
      components={
        Object {
          "p": [Function],
        }
      }
    >
      note body
    </default_1>
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={8}
    >
      <withRouter(Connect(WithStyles(NoteList)))
        deleteNote={[Function]}
        depth={1}
        notes={Map {}}
        parent_note_id={1}
        search=""
        updateNote={[Function]}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(CardContent))>
</WithStyles(ForwardRef(Card))>
`;

exports[`<Note /> matches snapshot 2`] = `
<WithStyles(ForwardRef(Card))
  className=""
>
  <WithStyles(ForwardRef(CardHeader))
    action={
      <React.Fragment>
        <WithStyles(ForwardRef(IconButton))
          aria-label="Add Subnote"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="Edit Note"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="More Options"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
      </React.Fragment>
    }
    avatar={<Memo />}
  />
  <WithStyles(ForwardRef(Menu))
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "left",
        "vertical": "bottom",
      }
    }
    getContentAnchorEl={null}
    id="more-menu"
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "top",
      }
    }
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(DeleteIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Delete Note
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(ClearIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Unpin Note
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(ArchiveIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Archive Note
    </WithStyles(ForwardRef(MenuItem))>
  </WithStyles(ForwardRef(Menu))>
  <ConfirmationDialog
    message="Are you sure?"
    negative="No"
    onNegative={[Function]}
    onPositive={[Function]}
    open={false}
    positive="Yes"
    title="You are about to delete note: undefined"
  />
  <ConfirmationDialog
    message="Are you sure?"
    negative="No"
    onNegative={[Function]}
    onPositive={[Function]}
    open={false}
    positive="Yes"
    title="If you close this editor, you will lose your changes."
  />
  <WithStyles(ForwardRef(CardContent))>
    <WithStyles(ForwardRef(Dialog))
      classes={
        Object {
          "root": undefined,
        }
      }
      fullScreen={false}
      fullWidth={true}
      maxWidth="lg"
      onClose={[Function]}
      open={false}
    >
      <React.Suspense
        fallback={
          <Loading
            color="#000000"
            delay={0}
            height={64}
            type="spin"
            width={64}
          />
        }
      >
        <lazy
          note={
            Object {
              "body": "",
              "parent_note_id": undefined,
              "tags": Array [],
              "title": "",
            }
          }
          onSave={[Function]}
        />
      </React.Suspense>
    </WithStyles(ForwardRef(Dialog))>
    <WithStyles(Tags) />
    <default_1
      components={
        Object {
          "p": [Function],
        }
      }
    />
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={8}
    >
      <withRouter(Connect(WithStyles(NoteList)))
        deleteNote={[Function]}
        depth={1}
        notes={Map {}}
        search=""
        updateNote={[Function]}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(CardContent))>
</WithStyles(ForwardRef(Card))>
`;

exports[`<Note /> matches snapshot 3`] = `
<WithStyles(ForwardRef(Card))
  className="undefined"
>
  <WithStyles(ForwardRef(CardHeader))
    action={
      <React.Fragment>
        <WithStyles(ForwardRef(IconButton))
          aria-label="Add Subnote"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="Edit Note"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="More Options"
          onClick={[Function]}
        >
          <Memo />
        </WithStyles(ForwardRef(IconButton))>
      </React.Fragment>
    }
    avatar={null}
  />
  <WithStyles(ForwardRef(Menu))
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "left",
        "vertical": "bottom",
      }
    }
    getContentAnchorEl={null}
    id="more-menu"
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "top",
      }
    }
  >
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(DeleteIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Delete Note
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(DoneIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Pin Note
    </WithStyles(ForwardRef(MenuItem))>
    <WithStyles(ForwardRef(MenuItem))
      onClick={[Function]}
    >
      <WithStyles(ForwardRef(ListItemIcon))>
        <Memo(ForwardRef(UnarchiveIcon)) />
      </WithStyles(ForwardRef(ListItemIcon))>
      Unarchive Note
    </WithStyles(ForwardRef(MenuItem))>
  </WithStyles(ForwardRef(Menu))>
  <ConfirmationDialog
    message="Are you sure?"
    negative="No"
    onNegative={[Function]}
    onPositive={[Function]}
    open={false}
    positive="Yes"
    title="You are about to delete note: undefined"
  />
  <ConfirmationDialog
    message="Are you sure?"
    negative="No"
    onNegative={[Function]}
    onPositive={[Function]}
    open={false}
    positive="Yes"
    title="If you close this editor, you will lose your changes."
  />
  <WithStyles(ForwardRef(CardContent))>
    <WithStyles(ForwardRef(Dialog))
      classes={
        Object {
          "root": undefined,
        }
      }
      fullScreen={false}
      fullWidth={true}
      maxWidth="lg"
      onClose={[Function]}
      open={false}
    >
      <React.Suspense
        fallback={
          <Loading
            color="#000000"
            delay={0}
            height={64}
            type="spin"
            width={64}
          />
        }
      >
        <lazy
          note={
            Object {
              "body": "",
              "parent_note_id": undefined,
              "tags": Array [],
              "title": "",
            }
          }
          onSave={[Function]}
        />
      </React.Suspense>
    </WithStyles(ForwardRef(Dialog))>
    <WithStyles(Tags) />
    <default_1
      components={
        Object {
          "p": [Function],
        }
      }
    />
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={8}
    >
      <withRouter(Connect(WithStyles(NoteList)))
        deleteNote={[Function]}
        depth={1}
        notes={Map {}}
        search=""
        updateNote={[Function]}
      />
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(CardContent))>
</WithStyles(ForwardRef(Card))>
`;
